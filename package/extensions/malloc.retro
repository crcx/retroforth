# Malloc

~~~
{{
  :mem:invoke #15 io:scan-for io:invoke ;

  #0 'ALLOC  const
  #1 'FREE   const
  #2 'STORE  const
  #3 'FETCH  const
  #4 'RESIZE const

---reveal---

  :mem:alloc  (:n--a) ALLOC  mem:invoke ;
  :mem:store  (:an--) STORE  mem:invoke ;
  :mem:fetch  (:a--n) FETCH  mem:invoke ;
  :mem:free   (:a--)  FREE   mem:invoke ;
  :mem:resize (:an--) RESIZE mem:invoke ;
}}

:mem:cell+ (:nn-n) #8 * + ;
:mem:fetch-double (:n-nn)
  dup #1 mem:cell+ fetch push mem:fetch pop ;
:mem:store-double (:ann-nn)
  push push dup-pair #1 mem:cell+ pop mem:store pop mem:store ;

'Use_malloc_to_allocate_memory._Returns_a_double_cell_pointer_to_this_memory. 'mem:alloc d:set-description
'Return_address_of_next_cell._Uses_a_double_cell_pointer_on_the_stack. 'mem:cell+ d:set-description
'Fetch_value_from_malloc'd_memory_region._Address_is_a_double_cell_value. 'mem:fetch d:set-description
'Fetch_a_double_cell_value_from_a_malloc_memory_region. 'mem:fetch-double d:set-description
'Fre_a_malloc'd_region_of_memory._Pass_a_double_cell_pointer_to_the_memory_to_free. 'mem:free d:set-description
'Resize_a_malloc'd_memory_area. 'mem:resize d:set-description
'Store_a_value_into_a_malloc'd_memory_region._Uses_a_double_cell_pointer_for_the_address. 'mem:store d:set-description
'Store_a_double_value_into_a_malloc'd_memory_region._Uses_a_double_cell_pointer_for_the_address. 'mem:store-double d:set-description
~~~
